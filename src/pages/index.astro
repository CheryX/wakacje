---
import Until from '../components/DaysUntil.astro';
import settings from '../settings'

function formatDate(date) {
		const monthsInRomanNumerals = [
			"", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII"
		];
		
		const day = date.getDate().toString().padStart(2, "0");
		const monthInRomanNumerals = monthsInRomanNumerals[date.getMonth() + 1];
		
		return `${day} ${monthInRomanNumerals}`;
	}


---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Ile do wakacji</title>
	</head>
	<body class="text-white min-h-screen">
		<main class="flex flex-col xl:flex-row items-center xl:justify-evenly min-h-screen">

			<div class="flex flex-col justify-center my-32 xl:my-0 xl:w-1/2">
				
				<div class="mx-auto">
	
					<h1 class="text-8xl text-center text-[#DEC1FF] font-bold italic">Ile do wakacji</h1>
					
					<div class="flex justify-evenly">
						<div class="timer">
							<div id="0A">23</div>
							<span>dni</span>
						</div>
						<div class="timer">
							<div id="0B">23</div>
							<span>godziny</span>
						</div>
						<div class="timer">
							<div id="0C">23</div>
							<span>minuty</span>
						</div>
						<div class="timer">
							<div id="0D">23</div>
							<span>sekundy</span>
						</div>
					</div>
	
					<div class="mt-10 mb-2 text-[#958ACC] font-medium italic text-2xl">albo...</div>
	
					<div class="stats">
						<div><span id="h0">0</span> dni</div>
						<div><span id="h1">0</span> tygodni</div>
						<div><span><Until id="h2" days={[1, 2, 3, 4, 5]} to={new Date(settings.endYear)} /></span> dni roboczych</div>
						<div><span><Until id="h3" days={[1, 2, 3, 4, 5]} to={new Date(settings.symEndYear)} /></span> dni do ocen</div>
					</div>
	
				</div>
	
			</div>
	
			<div class="flex flex-col justify-center my-32 xl:my-0 xl:w-1/2">
				<table class="rounded-corners mx-auto text-lg bg-[#816EDC]/10">
		
					<thead class="">
						<tr class="font-bold">
							<th class="text-left">Przedmiot</th>
							<th>{formatDate(new Date(settings.symEndYear))}</th>
							<th>{formatDate(new Date(settings.endYear))}</th>
						</tr>
					</thead>
		
					<tbody>
						{settings.subjects.map((data) => (
							<tr>
								<td class="">{data.name}</td>
								<td class="text-center font-mono text-2xl py-1 font-bold"> <Until id={"o_"+data.name} days={data.occurences} to={new Date(settings.symEndYear)} /> </td>
								<td class="text-center font-mono text-2xl py-1 font-bold"> <Until id={"k_"+data.name} days={data.occurences} to={new Date(settings.endYear)} /> </td>
							</tr>
						) )}
					</tbody>
				</table>
			</div>
	
	
	
		</main>
	</body>
</html>

<style is:global>
	@font-face {
		font-family: 'Inter';
		src: url('/fonts/Inter.ttf');
		font-display: swap;
	}

	@font-face {
		font-family: 'JetBrains Mono';
		src: url('/fonts/JetBrainsMono.ttf');
		font-display: swap;
	}

	html {
		background: linear-gradient(107.69deg, #181330 17.43%, #2B2231 97.61%);
		font-family: "Inter", sans-serif;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}

</style>

<script define:vars={{settings}}>

	function daysUntilDate(targetDate) {
		const oneDayInMilliseconds = 1000 * 60 * 60 * 24;
		const currentDate = new Date();
		const timeDiffInMilliseconds = targetDate.getTime() - currentDate.getTime();
		const daysUntil = timeDiffInMilliseconds / oneDayInMilliseconds;
		return daysUntil.toFixed( 7 - Math.floor(Math.log10(daysUntil)) );
	}
	
	function weeksUntilDate(targetDate) {
		const oneDayInMilliseconds = 1000 * 60 * 60 * 24;
		const currentDate = new Date();
		const timeDiffInMilliseconds = targetDate.getTime() - currentDate.getTime();
		const daysUntil = timeDiffInMilliseconds / oneDayInMilliseconds / 7;
		return daysUntil.toFixed( 7 - Math.floor(Math.log10(daysUntil)) );
	}
	

	let dateFuture = new Date(settings.endYear + "T00:00:00.000+02:00");
	
	function updateNumbers() {

		let timeDiff = dateFuture - new Date();

		var days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
		var hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
		var minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
		var seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);

		document.getElementById("0A").innerText = days;
		document.getElementById("0B").innerText = hours;
		document.getElementById("0C").innerText = minutes;
		document.getElementById("0D").innerText = seconds;
	}

	function updateNumbersFast() {
		document.getElementById("h0").innerText = daysUntilDate(dateFuture);
		document.getElementById("h1").innerText = weeksUntilDate(dateFuture);
	}


	updateNumbers();
	updateNumbersFast();
	setInterval(() => {
		updateNumbers();
	}, 1000);
	setInterval(() => {
		updateNumbersFast();
	}, 10);

</script>

<style>

	.timer {
		@apply mt-12 flex flex-col
	}

	.timer > div {
		@apply font-extrabold text-7xl font-mono text-[#ECDCFF] text-center
	}

	.timer > span {
		@apply font-semibold text-[#968EBA] text-center text-xl
	}

	.stats > div {
		@apply text-[#958ACC] font-mono text-[35px] font-medium
	}

	.stats span {
		@apply text-[#DEC1FF] font-mono text-[36px] font-medium
	}

	table > thead > tr > th {
		@apply py-4 px-12 text-2xl
	}

	table > tbody > tr > td {
		@apply py-3 px-12 text-xl
	}

	tbody > tr {
		@apply even:bg-[#0E0A1F]/20 odd:bg-none
	}

	table.rounded-corners {
	/* Change these properties */
		--border: 0px solid black;
		border-radius: 10px;

		/* Don't change these properties */
		border-spacing: 0;
		border-collapse: separate;
		border: var(--border);
		overflow: hidden;
	}

	/* Apply a border to the right of all but the last column */
	table.rounded-corners th:not(:last-child),
	table.rounded-corners td:not(:last-child) {
		border-right: var(--border);
	}

	/* Apply a border to the bottom of all but the last row */
	table.rounded-corners>thead>tr:not(:last-child)>th,
	table.rounded-corners>thead>tr:not(:last-child)>td,
	table.rounded-corners>tbody>tr:not(:last-child)>th,
	table.rounded-corners>tbody>tr:not(:last-child)>td,
	table.rounded-corners>tfoot>tr:not(:last-child)>th,
	table.rounded-corners>tfoot>tr:not(:last-child)>td,
	table.rounded-corners>tr:not(:last-child)>td,
	table.rounded-corners>tr:not(:last-child)>th,
	table.rounded-corners>thead:not(:last-child),
	table.rounded-corners>tbody:not(:last-child),
	table.rounded-corners>tfoot:not(:last-child) {
		border-bottom: var(--border);
	}

	table.rounded-corners th {
		background: #564D83;
	}

</style>